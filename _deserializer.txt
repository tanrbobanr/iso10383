class _Deserializer:
    @staticmethod
    def _o(
        buf: BinaryIO, deserializer: Callable[..., _T], *args: Any
    ) -> Union[_T, None]:
        b = buf.read(1)
        if b[0]:
            return deserializer(buf, *args)
        return None

    @staticmethod
    def _s(buf: BinaryIO, size: int) -> str:
        length = int.from_bytes(buf.read(size), "big")
        encoded = buf.read(length)
        return encoded.decode("utf-8")

    @staticmethod
    def _d(buf: BinaryIO) -> datetime.date:
        # year       : 15
        # month      : 4
        # day        : 5
        data = int.from_bytes(buf.read(3), "big")
        return datetime.date(
            year=(data >> 9),
            month=((data >> 5) & 0xf),
            day=(data & 0x1f)
        )

    @staticmethod
    def _e(buf: BinaryIO, size: int, enum_class: type[_E]) -> _E:
        e = enum_class._value2member_map_[
            int.from_bytes(buf.read(size), "big")
        ]
        if not isinstance(e, enum_class):
            raise ValueError(
                "'_value2member_map_' contains incorrect enum value"
            )
        return e

    @staticmethod
    def _format_mic(mic: str) -> str:
        mic = mic.lower()
        if (
            mic[0].isdigit()
            or mic in {"else", "from", "pass", "with"}
        ):
            return f"_{mic}"
        return mic

    @classmethod
    def deserialize(
        cls, buf: BinaryIO, existing: dict[str, MICEntry]
    ) -> tuple[str, MICEntry]:
        def _m(value: Union[str, None]) -> Union[MICEntry, None]:
            if value:
                return existing[cls._format_mic(value)]
            return None

        entry = MICEntry(
            mic                     = cls._s(buf, 1),
            market_name             = cls._s(buf, 1),
            market_category_code    = cls._e(buf, 1, MCC),
            creation_date           = cls._d(buf),
            status                  = cls._e(buf, 1, Status),
            city                    = cls._o(buf, cls._e, 2, City),
            operating_mic           = _m(cls._o(buf, cls._s, 1)),
            institution_description = cls._o(buf, cls._s, 1),
            legel_entity_name       = cls._o(buf, cls._s, 1),
            legal_entity_identifier = cls._o(buf, cls._s, 1),
            acronym                 = cls._o(buf, cls._s, 1),
            iso_country_code        = cls._o(buf, cls._e, 1, ISOCC),
            website                 = cls._o(buf, cls._s, 1),
            last_update_date        = cls._o(buf, cls._d),
            last_validation_date    = cls._o(buf, cls._d),
            expiry_date             = cls._o(buf, cls._d),
            comments                = cls._o(buf, cls._s, 2)
        )

        return (cls._format_mic(entry.mic), entry)


def _build_mic(data: pathlib.Path) -> enum.Enum:
    mics: dict[str, MICEntry] = dict()

    # deserialize data file
    with data.open("rb") as infile:
        num_entries = int.from_bytes(infile.read(2), "big")
        for _ in range(num_entries):
            k, v = _Deserializer.deserialize(infile, mics)
            mics[k] = v

    # create and return enum
    return enum.Enum("MIC", mics)


globals()["MIC"] = _build_mic(pathlib.Path(__file__).parent / "_data")
